#
# Resolve compiler type
#
if(CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
	set(CAMEL_COMPILER "apple_clang")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
	set(CAMEL_COMPILER "clang")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
	set(CAMEL_COMPILER "gcc")
else()
	message(FATAL_ERROR "\t\tCompiler not supported (${CMAKE_CXX_COMPILER_ID}).")
endif()

#
# Resolve compiler frontend
#
if(CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "MSVC")
	set(CAMEL_COMPILER_FRONTEND "msvc")
else()
	set(CAMEL_COMPILER_FRONTEND "gnu")
endif()

#
# Create a new variable based on CAMEL_COMPILER and CAMEL_COMPILER_FRONTEND
#
string(TOUPPER ${CAMEL_COMPILER} CAMEL_COMPILER_UPPER)
string(TOLOWER ${CAMEL_COMPILER} CAMEL_COMPILER_LOWER)

string(TOUPPER ${CAMEL_COMPILER_FRONTEND} CAMEL_COMPILER_FRONTEND_UPPER)
string(TOLOWER ${CAMEL_COMPILER_FRONTEND} CAMEL_COMPILER_FRONTEND_LOWER)

set(_COMPILER CAMEL_COMPILER_${CAMEL_COMPILER_UPPER})
set(_COMPILER_FRONTEND CAMEL_COMPILER_FRONTEND_${CAMEL_COMPILER_FRONTEND_UPPER})

set(${_COMPILER} 1)
set(${_COMPILER_FRONTEND} 1)

message("\t\tCAMEL_COMPILER: ${CAMEL_COMPILER_UPPER}")
message("\t\tCAMEL_COMPILER_FRONTEND: ${CAMEL_COMPILER_FRONTEND_UPPER}")

unset(_COMPILER)
unset(_COMPILER_FRONTEND)